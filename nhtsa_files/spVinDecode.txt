
CREATE PROCEDURE [dbo].[spVinDecode]
	@v varchar(50),
	@includePrivate bit = null, 
	@year int = null, 
	@includeAll bit = null, 
	@NoOutput bit = 0 

	
as 
begin
	SET NOCOUNT ON;


	declare 
		@make varchar(50) = null, 
		@includeNotPublicilyAvailable bit = null, 
		@vin varchar(17) = '', 
		@modelYear int, 
		@modelYearSource varchar(20) = '***X*|Y', 
		@conclusive bit = 0, 
		@e12 bit = 0 

	declare @ReturnCode varchar(100) = ''
	set @vin = upper(LTRIM(RTRIM(@v)))
	declare @descriptor varchar(17) = dbo.fVinDescriptor(@vin) 
	declare @dmy int = null


	set @dmy = (select ModelYear from VinDescriptor where Descriptor = @descriptor)
	
	declare @rmy int, @omy int

	declare @DecItem [tblDecodingItem]


	if @dmy between 1980 and (year(getdate())+1)
	begin
		
		select @conclusive=1, @e12 = iif (@year is not null and @dmy is not null and @year <> @dmy, 1, 0)
		insert into @DecItem ([DecodingId],[CreatedOn],[PatternId],[Keys],[VinSchemaId],[WmiId],[ElementId],[AttributeId],[Value],[Source],[Priority],[TobeQCed])
		exec [dbo].[spVinDecode_Core] 1, @vin, @dmy, @descriptor, @conclusive, @e12, @includeAll, @includePrivate, @includeNotPublicilyAvailable, @ReturnCode output
	end
	else
	begin
		select @rmy = dbo.fVinModelYear2 (upper(@vin)), @conclusive = 1
		if @rmy < 0 
			select @omy = -@rmy-30, @rmy = -@rmy,  @conclusive = 0


		declare @do3and4 bit = 1
		
		if @year between 1980 and (year(getdate())+1)
		begin
			if (@year = @rmy or @year = @omy)
				set @do3and4 = 1
			else
			begin
				set @modelYearSource = cast(@year as varchar)
				

				insert into @DecItem ([DecodingId],[CreatedOn],[PatternId],[Keys],[VinSchemaId],[WmiId],[ElementId],[AttributeId],[Value],[Source],[Priority],[TobeQCed])
				exec [dbo].[spVinDecode_Core] 2, @vin, @year, @modelYearSource, 1, 1, @includeAll, @includePrivate, @includeNotPublicilyAvailable, @ReturnCode output
				set @do3and4 = iif(@ReturnCode like '% 8 %' and (@rmy is not null), 1, 0)  

			end
		end

		
		if @do3and4 = 1
		begin
			select @e12 = iif (@year is not null and @rmy is not null and @year <> @rmy, 1, 0)
			insert into @DecItem ([DecodingId],[CreatedOn],[PatternId],[Keys],[VinSchemaId],[WmiId],[ElementId],[AttributeId],[Value],[Source],[Priority],[TobeQCed])
			exec [dbo].[spVinDecode_Core] 3, @vin, @rmy, @modelYearSource, @conclusive, @e12, @includeAll, @includePrivate, @includeNotPublicilyAvailable, @ReturnCode output
			if not @omy is null
			begin
				select @e12 = iif (@year is not null and @omy is not null and @year <> @omy, 1, 0)
				insert into @DecItem ([DecodingId],[CreatedOn],[PatternId],[Keys],[VinSchemaId],[WmiId],[ElementId],[AttributeId],[Value],[Source],[Priority],[TobeQCed])
				exec [dbo].[spVinDecode_Core] 4, @vin, @omy, @modelYearSource, @conclusive, @e12, @includeAll, @includePrivate, @includeNotPublicilyAvailable, @ReturnCode output
			end
		end
		
	end



	
	declare @bestPass int = 0 
	declare @passes int = (select count (distinct decodingId) from @DecItem)

	CREATE TABLE #x(
		DecodingId int null, 
		ErrorCodes varchar(100) null, 
		ErrorValue int null,
		ElementsWeight int null , 
		Patterns int null , 
		ModelYear int
) 
	insert into #x
	select err.* , el.ElementsWeight, p.Patterns, my.ModelYear + my.ModelYearBonus as ModelYear
	from 
	(	
		select distinct DecodingId
		from @DecItem 
	) a 
	left outer join
	(	
		select DecodingId, Value as ErrorCodes, dbo.fErrorValue(Value) ErrorValue
		from @DecItem 
		where ElementId = 143
	) err on a.DecodingId = err.DecodingId
	left outer join
	(	
		select DecodingId, sum(weight) as ElementsWeight
		from (
			select distinct DecodingId, d.ElementId, e.weight
			from @DecItem d inner join Element e on d.ElementId = e.id 
			where isnull(d.Value, '') <> '' and e.weight is not null
		) t
		group by DecodingId
	) el on err.DecodingId = el.DecodingId
	left outer join
	(	
		select DecodingId, count(*) as Patterns
		from @DecItem d 
		where Source in ('Pattern', 'EngineModelPattern' ) and isnull(Value, '') not in ('', 'Not Applicable')
		group by DecodingId
	) p on err.DecodingId = p.DecodingId
	left outer join
	(	
		select DecodingId, cast(Value as int) as ModelYear, case when @year = value then 10000 else 0 end as ModelYearBonus
		from @DecItem 
		where ElementId = 29
	) my on a.DecodingId = my.DecodingId

	select top 1 @bestPass = DecodingId from #x order by ErrorValue desc, ElementsWeight desc, Patterns desc, modelYear desc 

	delete @DecItem where decodingid <> @bestPass

	update @DecItem 
	set TobeQCed = vs.TobeQCed
	from @DecItem d inner join VinSchema vs on d.VinSchemaId = vs.Id and vs.TobeQCed = 1
	where lower(left(isnull(d.Source, ''), 7)) in ('pattern', 'formula', 'enginem', 'convers')

	if isnull(@includeNotPublicilyAvailable, 0) = 0 
		delete 
		from @DecItem 
		where TobeQCed = 1

	update @DecItem	
	set value = case when e.LookupTable is null then t.AttributeId else dbo.fElementAttributeValue (t.ElementId, t.AttributeId) end
	from @DecItem t inner join Element e on t.ElementId = e.Id
	where t.Value = 'XXX' 

	if @NoOutput = 0 
	begin
		select 
			e.GroupName, 
			e.Name as Variable, 
			REPLACE(REPLACE(REPLACE(t.Value, CHAR(9), ' '), CHAR(13), ' '), CHAR(10), ' ') as Value, 
			t.PatternId, 
			t.VinSchemaId, 
			t.Keys, 
			e.id as ElementId, 
			t.AttributeId, 
			t.CreatedOn as CreatedOn, 
			t.WmiId,
			e.Code, 
			e.DataType, 
			e.Decode,
			t.Source, 
			t.ToBeQCed as ToBeQCd
		from 
			Element e with (nolock)
			left outer join @DecItem t on t.ElementId = e.Id
		where 

			(isnull(e.Decode, '') <> '') 
			and ((@includeAll) = 1 or (isnull(@includeAll, 0) = 0 and not t.ElementId is null)) 
			and (@includePrivate = 1 or isnull(e.IsPrivate, 0) = 0 ) 


		order by 

			case isnull(e.GroupName, '')
				when '' then 0
				when 'General' then 1
				when 'Exterior / Body' then 2
				when 'Exterior / Dimension' then 3
				when 'Exterior / Truck' then 4
				when 'Exterior / Trailer' then 5
				when 'Exterior / Wheel tire' then 6
				when 'Interior' then 7
				when 'Interior / Seat' then 8
				when 'Mechanical / Transmission' then 9
				when 'Mechanical / Drivetrain' then 10
				when 'Mechanical / Brake' then 11
				when 'Mechanical / Battery' then 12
				when 'Mechanical / Battery / Charger' then 13
				when 'Engine' then 14
				when 'Passive Safety System' then 15
				when 'Passive Safety System / Air Bag Location' then 16
				when 'Active Safety System' then 17
				when 'Internal' then 18
				else 99 end
			, e.Id
	end
	else
	begin
		insert into DecodingOutput (GroupName, Variable, Value, PatternId, VinSchemaId, Keys, ElementId, AttributeId, CreatedOn, WmiId, Code, DataType, Decode, Source)
		select 
			e.GroupName, 
			e.Name as Variable, 
			REPLACE(REPLACE(REPLACE(t.Value, CHAR(9), ' '), CHAR(13), ' '), CHAR(10), ' ') as Value, 
			t.PatternId, 
			t.VinSchemaId, 
			t.Keys, 
			e.id as ElementId, 
			t.AttributeId, 
			t.CreatedOn as CreatedOn, 
			t.WmiId,
			e.Code, 
			e.DataType, 
			e.Decode,
			t.Source 
		from 
			Element e with (nolock)
			left outer join @DecItem t on t.ElementId = e.Id
		where 
			(isnull(e.Decode, '') <> '') 
			and ((@includeAll) = 1 or (isnull(@includeAll, 0) = 0 and not t.ElementId is null)) 
			and (@includePrivate = 1 or isnull(e.IsPrivate, 0) = 0 ) 
		order by 
			case isnull(e.GroupName, '')
				when '' then 0
				when 'General' then 1
				when 'Exterior / Body' then 2
				when 'Exterior / Dimension' then 3
				when 'Exterior / Truck' then 4
				when 'Exterior / Trailer' then 5
				when 'Exterior / Wheel tire' then 6
				when 'Interior' then 7
				when 'Interior / Seat' then 8
				when 'Mechanical / Transmission' then 9
				when 'Mechanical / Drivetrain' then 10
				when 'Mechanical / Brake' then 11
				when 'Mechanical / Battery' then 12
				when 'Mechanical / Battery / Charger' then 13
				when 'Engine' then 14
				when 'Passive Safety System' then 15
				when 'Passive Safety System / Air Bag Location' then 16
				when 'Active Safety System' then 17
				when 'Internal' then 18
				else 99 end
			, e.Id


	end

	if len(@vin) > 8
	begin
		declare @desc2 varchar(50) = ''
		select @desc2 = @desc2 + AttributeId from @DecItem where elementid = 196
		if left(@vin, 8) <> left(@desc2, 8)
			insert into tmpvinDescLog(vin, desc1, desc2) 
			values (@vin, @descriptor, @desc2)
	end


end
